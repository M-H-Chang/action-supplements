// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestServer.Models;

namespace supplement_store.Migrations
{
    [DbContext(typeof(RestServerContext))]
    [Migration("20210728140331_addIdentity")]
    partial class addIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RestServer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RestServer.Models.Supplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Supplements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "26 Serving Sizes",
                            Name = "Ghost Protein",
                            Price = "$39.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 2,
                            Description = "25 Serving Sizes",
                            Name = "GNC AMP Wheybolic Protein",
                            Price = "$64.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 3,
                            Description = "80 Serving Sizes",
                            Name = "Optimum Protein",
                            Price = "$59.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 4,
                            Description = "24 Serving Sizes",
                            Name = "Dymatize ISO Protein",
                            Price = "$29.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 5,
                            Description = "28 Serving Sizes",
                            Name = "GNC AMP Pure Isolate Protein",
                            Price = "$34.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 6,
                            Description = "22 Serving Sizes",
                            Name = "GNC AMP Wheybolic™ Ripped Performance Protein ",
                            Price = "$69.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 7,
                            Description = "49 Serving Sizes",
                            Name = "Jym® Pro Jym Ultra-Premium Protein Powder Blend",
                            Price = "$59.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 8,
                            Description = "30 Serving Sizes",
                            Name = "Alani Nu Whey Protein",
                            Price = "$44.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 9,
                            Description = "28 Serving Sizes",
                            Name = "GNC AMP Sustained Protein Blend",
                            Price = "$39.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 10,
                            Description = "44 Serving Sizes",
                            Name = "Isopure® Zero Carb Protein Powder",
                            Price = "$44.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 11,
                            Description = "22 Serving Sizes",
                            Name = "GNC AMP Wheybolic™ Alpha with MyoTOR®",
                            Price = "$69.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 12,
                            Description = "20 Serving Sizes",
                            Name = "Jym® Iso Jym Whey Protein Isolate",
                            Price = "$32.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 13,
                            Description = "30 Serving Sizes",
                            Name = "Musclegen Performance Nutrition Genepro® Next Generation Protein - Flavorless",
                            Price = "$37.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 14,
                            Description = "10 Serving Sizes",
                            Name = "GNC AMP Wheybolic™ - Classic Vanilla",
                            Price = "$34.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 15,
                            Description = "23 Serving Sizes",
                            Name = "Pro Supps® Whey Isolate Protein",
                            Price = "$29.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 16,
                            Description = "15 Serving Sizes",
                            Name = "Isopure® Low Carb Protein Powder",
                            Price = "$19.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 17,
                            Description = "21 Serving Sizes",
                            Name = "Isopure® With Coffee - Espresso",
                            Price = "$39.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 18,
                            Description = "9 Serving Sizes",
                            Name = "GNC AMP Wheybolic™ Ripped - Strawberries and Cream",
                            Price = "$38.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 19,
                            Description = "40 Serving Sizes",
                            Name = "STI G6 Sports Prolific Isolate",
                            Price = "$69.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 20,
                            Description = "9 Serving Sizes",
                            Name = "GNC AMP Wheybolic™ Alpha Protein + Test & Power",
                            Price = "$38.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 21,
                            Description = "33 Serving Sizes",
                            Name = "Women's Best™ Fit Pro Whey Protein",
                            Price = "$39.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 22,
                            Description = "26 Serving Sizes",
                            Name = "GNC Pro Performance® 100% Whey Protein",
                            Price = "$39.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 23,
                            Description = "16 Serving Sizes",
                            Name = "Isopure® Infusions™",
                            Price = "$24.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 24,
                            Description = "22 Serving Sizes",
                            Name = "Isopure® Whey Protein Isolate - Unflavored",
                            Price = "$44.99",
                            Type = "Protein"
                        },
                        new
                        {
                            Id = 25,
                            Description = "30 Serving Sizes",
                            Name = "Beyond Raw® LIT™ Pre-Workout",
                            Price = "$39.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 26,
                            Description = "20 Serving Sizes",
                            Name = "Beyond Raw® LIT AF™ Pre-Workout",
                            Price = "$44.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 27,
                            Description = "25 Serving Sizes",
                            Name = "GHOST® LEGEND® V2 Pre-Workout",
                            Price = "$44.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 28,
                            Description = "30 Serving Sizes",
                            Name = "Bucked Up® Woke AF™ Nootropic Pre-Workout",
                            Price = "$54.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 29,
                            Description = "30 Serving Sizes",
                            Name = "Jym® Pre Jym Pre-Workout - Rainbow Sherbet",
                            Price = "$49.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 30,
                            Description = "24 Serving Sizes",
                            Name = "BSN® N.O.-Xplode® VASO Pre-Workout",
                            Price = "$49.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 31,
                            Description = "20 Serving Sizes",
                            Name = "Cellucor® C4® Ultimate Pre-Workout - Orange Mango",
                            Price = "$39.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 32,
                            Description = "30 Serving Sizes",
                            Name = "Alani Nu Pre-Workout",
                            Price = "$44.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 33,
                            Description = "40 Serving Sizes",
                            Name = "Axe & Sledge Supplements™ Ignition Switch Stim Pre-Workout",
                            Price = "$39.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 34,
                            Description = "30 Serving Sizes",
                            Name = "Beyond Raw® Precision BCAA",
                            Price = "$39.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 35,
                            Description = "30 Serving Sizes",
                            Name = "GAT® Sport NITRAFLEX® Pre-Workout",
                            Price = "$36.99",
                            Type = "PreWorkout"
                        },
                        new
                        {
                            Id = 36,
                            Description = "20 Serving Sizes",
                            Name = "Cellucor® C4® Extreme Pre-Workout",
                            Price = "$34.99",
                            Type = "PreWorkout"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RestServer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RestServer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestServer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RestServer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
